{"version":3,"sources":["Components/Message.js","Components/firebase.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Main","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","width","height","FormControl","InputLabel","Input","onChange","e","target","value","IconButton","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","console","log","disabled","key","App","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5e77b46c.chunk.js","sourcesContent":["import React,{forwardRef} from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './message.css';\r\n\r\nconst Message = forwardRef(({message, username}, ref) => {\r\n    const isUser = username === message.username;\r\n    return (\r\n        <div ref={ref} className={`message ${isUser}&& message__user`}>\r\n          <Card className={isUser? 'message__userCard':'message__guestCard'} >\r\n              <CardContent>\r\n                  <Typography color=\"white\"\r\n                  variant=\"h5\"\r\n                  component=\"h2\">\r\n                    { !isUser && `${message.username || 'unknown User'}  :-  ` }  { message.message}\r\n                  </Typography>\r\n              </CardContent>\r\n          </Card>\r\n        </div>\r\n    )\r\n}\r\n)\r\n\r\nexport default Message\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCNwvt8DrOE_0FAwBSklr40oWCGARG6I9Y\",\r\n    authDomain: \"facebook-bharath.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-bharath.firebaseio.com\",\r\n    projectId: \"facebook-bharath\",\r\n    storageBucket: \"facebook-bharath.appspot.com\",\r\n    messagingSenderId: \"340446501939\",\r\n    appId: \"1:340446501939:web:6901df1b1c56230f515746\",\r\n    measurementId: \"G-ZZ8TEBPJF8\"\r\n\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React, { useState, useEffect} from 'react';\r\nimport '../App.css';\r\nimport {  FormControl, InputLabel, Input } from '@material-ui/core';\r\n\r\nimport Message from './Message';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\nimport FlipMove from 'react-flip-move';\r\nimport { IconButton } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nfunction Main() {\r\n    const [input,setInput] = useState('');\r\n    const [messages,setMessages] = useState([]);\r\n    const [username, setUsername] = useState('');\r\n\r\n    useEffect(() => {\r\n        db.collection('messages')\r\n        .orderBy('timestamp','desc')\r\n        .onSnapshot(snapshot => {\r\n            setMessages(snapshot.docs.map(doc => ({id:doc.id, message:doc.data()})))\r\n        })\r\n\r\n    },[])\r\n    \r\n    useEffect(() => {\r\n        setUsername(prompt('Please Enter your name'))\r\n    },[] )\r\n\r\n   const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection('messages').add({\r\n            message:input,\r\n            username:username,\r\n            timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n\r\n        setMessages([...messages, {username:username,message:input}]);\r\n        console.log(messages);\r\n        setInput('');\r\n    }\r\n   \r\n    return (\r\n        <div>\r\n            <img src=\"https://lh3.googleusercontent.com/proxy/j28z3a4gERxjBYgbSuMi-wny_lXr3sl49xmuLjD5M0802fozBs3gGaNfKI3whRCOAxH8Dg1SCrJi3Yf3ahNjz5YWxscfn0dI9IH7xC72OKx5CxeqA2A\" alt='Facebook logo' width='100' height='100' />\r\n            <h3>Welcome {username} </h3>\r\n            \r\n            <form className=\"app__form\" >\r\n            <FormControl className='app__formControl'>\r\n                <InputLabel>Enter message ...</InputLabel>\r\n                <Input className='app__input' onChange = {(e) => setInput(e.target.value) } value={input} />\r\n                \r\n                <IconButton className='app__iconButton' type='form' onClick = {sendMessage} color='primary'\r\n                            variant='contained' disabled={!input} >\r\n                    <SendIcon />\r\n                </IconButton>\r\n            </FormControl>\r\n            </form>\r\n\r\n            <FlipMove>\r\n            {\r\n                messages.map(({id,message}) => \r\n                        <Message key={id} username={username} message={message}  />\r\n                    \r\n                )\r\n            }\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport Main from './Components/Main';\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Main />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}